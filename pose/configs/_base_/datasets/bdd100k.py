"""Dataset settings."""

dataset_info = dict(
    dataset_name="bdd100k",
    paper_info=dict(
        author="BDD100K",
        title="BDD100K: A Diverse Driving Dataset for Heterogeneous Multitask Learning",
        container="CVPR",
        year="2020",
        homepage="https://bdd100k.com/",
    ),
    keypoint_info={
        0: dict(name="head", id=0, color=[255, 128, 0], type="upper", swap=""),
        1: dict(name="neck", id=1, color=[0, 255, 0], type="upper", swap=""),
        2: dict(
            name="right_shoulder",
            id=2,
            color=[51, 153, 255],
            type="upper",
            swap="left_shoulder",
        ),
        3: dict(
            name="right_elbow",
            id=3,
            color=[51, 153, 255],
            type="upper",
            swap="left_elbow",
        ),
        4: dict(
            name="right_wrist",
            id=4,
            color=[0, 255, 0],
            type="upper",
            swap="left_wrist",
        ),
        5: dict(
            name="left_shoulder",
            id=5,
            color=[51, 153, 255],
            type="upper",
            swap="right_shoulder",
        ),
        6: dict(
            name="left_elbow",
            id=6,
            color=[51, 153, 255],
            type="upper",
            swap="right_elbow",
        ),
        7: dict(
            name="left_wrist",
            id=7,
            color=[51, 153, 255],
            type="upper",
            swap="right_wrist",
        ),
        8: dict(
            name="right_hip",
            id=8,
            color=[0, 255, 0],
            type="lower",
            swap="left_hip",
        ),
        9: dict(
            name="right_knee",
            id=9,
            color=[0, 255, 0],
            type="lower",
            swap="left_knee",
        ),
        10: dict(
            name="right_ankle",
            id=10,
            color=[0, 255, 0],
            type="lower",
            swap="left_ankle",
        ),
        11: dict(
            name="left_hip",
            id=11,
            color=[255, 128, 0],
            type="lower",
            swap="right_hip",
        ),
        12: dict(
            name="left_knee",
            id=12,
            color=[255, 128, 0],
            type="lower",
            swap="right_knee",
        ),
        13: dict(
            name="left_ankle",
            id=13,
            color=[255, 128, 0],
            type="lower",
            swap="right_ankle",
        ),
        14: dict(
            name="right_hand",
            id=14,
            color=[0, 255, 0],
            type="upper",
            swap="left_hand",
        ),
        15: dict(
            name="left_hand",
            id=15,
            color=[255, 128, 0],
            type="upper",
            swap="right_hand",
        ),
        16: dict(
            name="right_foot",
            id=16,
            color=[0, 255, 0],
            type="lower",
            swap="left_foot",
        ),
        17: dict(
            name="left_foot",
            id=17,
            color=[255, 128, 0],
            type="lower",
            swap="right_foot",
        ),
    },
    skeleton_info={
        0: dict(link=("head", "neck"), id=0, color=[0, 255, 0]),
        1: dict(link=("neck", "left_shoulder"), id=1, color=[0, 255, 0]),
        2: dict(link=("neck", "right_shoulder"), id=2, color=[0, 255, 0]),
        3: dict(link=("neck", "left_hip"), id=3, color=[0, 255, 0]),
        4: dict(link=("neck", "right_hip"), id=4, color=[0, 255, 0]),
        5: dict(link=("left_shoulder", "left_elbow"), id=5, color=[0, 0, 255]),
        6: dict(
            link=("right_shoulder", "right_elbow"), id=6, color=[255, 0, 0]
        ),
        7: dict(link=("left_elbow", "left_wrist"), id=7, color=[0, 0, 255]),
        8: dict(link=("right_elbow", "right_wrist"), id=8, color=[255, 0, 0]),
        9: dict(link=("left_hip", "left_knee"), id=9, color=[0, 0, 255]),
        10: dict(link=("right_hip", "right_knee"), id=10, color=[255, 0, 0]),
        11: dict(link=("left_knee", "left_ankle"), id=11, color=[0, 0, 255]),
        12: dict(link=("right_knee", "right_ankle"), id=12, color=[255, 0, 0]),
        13: dict(link=("right_hand", "right_wrist"), id=13, color=[255, 0, 0]),
        14: dict(link=("left_hand", "left_wrist"), id=14, color=[0, 0, 255]),
        15: dict(link=("right_foot", "right_ankle"), id=15, color=[255, 0, 0]),
        16: dict(link=("left_foot", "left_ankle"), id=16, color=[0, 0, 255]),
    },
    joint_weights=[
        0.2,
        0.5,
        0.2,
        1.3,
        0.2,
        0.2,
        0.2,
        1.5,
        1.5,
        0.2,
        0.2,
        1.3,
        0.2,
        0.5,
        0.2,
        0.2,
        0.2,
        0.2,
    ],
    sigmas=[
        0.079,
        0.079,
        0.079,
        0.072,
        0.062,
        0.079,
        0.072,
        0.062,
        0.107,
        0.087,
        0.089,
        0.107,
        0.087,
        0.089,
        0.062,
        0.062,
        0.062,
        0.062,
    ],
)

data_root = "../data/bdd100k"

data_cfg = dict(
    image_size=[192, 256],
    heatmap_size=[48, 64],
    num_output_channels=18,
    num_joints=18,
    dataset_channel=[
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
    ],
    inference_channel=[
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
    ],
    crowd_matching=False,
    soft_nms=False,
    nms_thr=1.0,
    oks_thr=0.9,
    vis_thr=0.2,
    use_gt_bbox=False,
    det_bbox_thr=0.0,
    bbox_file=f"{data_root}/labels/person_det_for_bdd100k_val.json",
)

train_pipeline = [
    dict(type="LoadImageFromFile", to_float32=True, channel_order="bgr"),
    dict(type="TopDownRandomFlip", flip_prob=0.5),
    dict(
        type="TopDownHalfBodyTransform",
        num_joints_half_body=8,
        prob_half_body=0.3,
    ),
    dict(
        type="TopDownGetRandomScaleRotation", rot_factor=40, scale_factor=0.5
    ),
    dict(type="TopDownAffine"),
    dict(type="ToTensor"),
    dict(
        type="NormalizeTensor",
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225],
    ),
    dict(type="TopDownGenerateTarget", sigma=2),
    dict(
        type="Collect",
        keys=["img", "target", "target_weight"],
        meta_keys=[
            "image_file",
            "joints_3d",
            "joints_3d_visible",
            "center",
            "scale",
            "rotation",
            "bbox_score",
            "flip_pairs",
        ],
    ),
]

val_pipeline = [
    dict(type="LoadImageFromFile", to_float32=True, channel_order="bgr"),
    dict(type="TopDownAffine"),
    dict(type="ToTensor"),
    dict(
        type="NormalizeTensor",
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225],
    ),
    dict(
        type="Collect",
        keys=["img"],
        meta_keys=[
            "image_file",
            "center",
            "scale",
            "rotation",
            "bbox_score",
            "flip_pairs",
        ],
    ),
]

data = dict(
    samples_per_gpu=64,
    workers_per_gpu=2,
    val_dataloader=dict(samples_per_gpu=32),
    test_dataloader=dict(samples_per_gpu=32),
    train=dict(
        type="TopDownBDD100KPoseDataset",
        ann_file=f"{data_root}/labels/pose_train_cocofmt.json",
        img_prefix=f"{data_root}/images/100k/train/",
        data_cfg=data_cfg,
        pipeline=train_pipeline,
        dataset_info=dataset_info,
    ),
    val=dict(
        type="TopDownBDD100KPoseDataset",
        ann_file=f"{data_root}/labels/pose_val_cocofmt.json",
        img_prefix=f"{data_root}/images/100k/val/",
        data_cfg=data_cfg,
        pipeline=val_pipeline,
        dataset_info=dataset_info,
    ),
    test=dict(
        type="TopDownBDD100KPoseDataset",
        ann_file=f"{data_root}/labels/pose_val_cocofmt.json",
        img_prefix=f"{data_root}/images/100k/val/",
        data_cfg=data_cfg,
        pipeline=val_pipeline,
        dataset_info=dataset_info,
    ),
)
evaluation = dict(interval=10, metric="mAP")
